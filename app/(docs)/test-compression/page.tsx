"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import pako from "pako"
import { Buffer } from "buffer"
import { Loader2 } from "lucide-react"

export default function TestCompressionPage() {
  const [compressedInput, setCompressedInput] = useState("")
  const [decodedBuffer, setDecodedBuffer] = useState<string>("")
  const [decompressedJson, setDecompressedJson] = useState<string>("")
  const [parsedObject, setParsedObject] = useState<object | null>(null)
  const [error, setError] = useState<string | null>(null)

  const handleDecompress = () => {
    // Reset states
    setDecodedBuffer("")
    setDecompressedJson("")
    setParsedObject(null)
    setError(null)

    if (!compressedInput.trim()) {
      setError("Input cannot be empty.")
      return
    }

    try {
      // Step 1: Decode Base64
      let decoded
      try {
        decoded = Buffer.from(compressedInput, "base64")
        setDecodedBuffer(`Success! Buffer length: ${decoded.length} bytes.`)
      } catch (e: any) {
        throw new Error(`Base64 Decoding Failed: ${e.message}`)
      }

      // Step 2: Decompress with pako
      let decompressed
      try {
        decompressed = pako.inflate(decoded, { to: "string" })
        setDecompressedJson(decompressed)
      } catch (e: any) {
        throw new Error(`Zlib Decompression Failed: ${e.message}`)
      }

      // Step 3: Parse JSON
      let parsed
      try {
        parsed = JSON.parse(decompressed)
        setParsedObject(parsed)
      } catch (e: any) {
        throw new Error(`JSON Parsing Failed: ${e.message}`)
      }
    } catch (e: any) {
      setError(e.message)
      console.error(e)
    }
  }

  return (
    <div className="container mx-auto p-4 md:p-8">
      <header className="mb-8">
        <h1 className="scroll-m-20 text-4xl font-extrabold tracking-tight lg:text-5xl mb-2">
          T-JSON Decompression Tester
        </h1>
        <p className="text-lg text-muted-foreground">
          Use this tool to debug compressed T-JSON strings generated by AI assistants.
        </p>
      </header>

      <Card>
        <CardHeader>
          <CardTitle>Test Compressed Data</CardTitle>
          <CardDescription>
            Paste the compressed string from the URL (the part after <code>/create/</code>) into the
            text area below and click "Decompress".
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="space-y-2">
            <Textarea
              placeholder="eJyrVkrLz1eyUkpKLFKqBQA3GwUh..."
              className="min-h-[150px] font-mono text-sm"
              value={compressedInput}
              onChange={(e) => setCompressedInput(e.target.value)}
            />
          </div>
          <Button onClick={handleDecompress}>Decompress and Test</Button>

          {error && (
            <div className="p-4 bg-destructive/10 border border-destructive/20 rounded-md">
              <h3 className="font-semibold text-destructive">Error Occurred</h3>
              <p className="font-mono text-sm mt-2">{error}</p>
            </div>
          )}

          <div className="space-y-4">
            <h3 className="font-semibold">Decompression Steps:</h3>

            <Card>
              <CardHeader>
                <CardTitle className="text-base">Step 1: Base64 Decoding</CardTitle>
              </CardHeader>
              <CardContent>
                <pre className="text-sm bg-muted p-3 rounded-md overflow-x-auto">
                  {decodedBuffer || "Pending..."}
                </pre>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-base">Step 2: Zlib Decompression</CardTitle>
              </CardHeader>
              <CardContent>
                <pre className="text-sm bg-muted p-3 rounded-md max-h-60 overflow-auto">
                  {decompressedJson || "Pending..."}
                </pre>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-base">Step 3: JSON Parsing</CardTitle>
              </CardHeader>
              <CardContent>
                <pre className="text-sm bg-muted p-3 rounded-md max-h-60 overflow-auto">
                  {parsedObject ? JSON.stringify(parsedObject, null, 2) : "Pending..."}
                </pre>
              </CardContent>
            </Card>
          </div>
        </CardContent>
      </Card>

      <Card className="mt-8">
        <CardHeader>
          <CardTitle>Test Links with Compressed Data</CardTitle>
          <CardDescription>
            Use these links to test the compressed data on the creation page. The link will be
            disabled if there is no input.
          </CardDescription>
        </CardHeader>
        <CardContent className="flex flex-col sm:flex-row gap-4">
          <a
            href={`http://localhost:3000/create/${compressedInput}`}
            target="_blank"
            rel="noopener noreferrer"
            className="w-full"
          >
            <Button variant="outline" className="w-full" disabled={!compressedInput.trim()}>
              Local Environment
            </Button>
          </a>
          <a
            href={`https://t-json.vercel.app/create/${compressedInput}`}
            target="_blank"
            rel="noopener noreferrer"
            className="w-full"
          >
            <Button variant="outline" className="w-full" disabled={!compressedInput.trim()}>
              Production Environment
            </Button>
          </a>
        </CardContent>
      </Card>
    </div>
  )
}
