// File: lib/supabaseClient.ts
import { createClient } from "@supabase/supabase-js"
import type { TrainingPlanData } from "@/types/training-plan" // Import your type

// Define Database type based on your table structure (optional but helpful)
// You can generate this automatically using Supabase CLI later if needed
export type Database = {
  public: {
    Tables: {
      training_plans: {
        Row: {
          // The shape of data returned from SELECT
          id: string
          plan_data: TrainingPlanData | null
          created_at: string | null
        }
        Insert: {
          // The shape of data for INSERT
          id?: string // id is generated by default
          plan_data: TrainingPlanData
          created_at?: string
        }
        Update: {
          // The shape of data for UPDATE
          id?: string
          plan_data?: TrainingPlanData
          created_at?: string
        }
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

// Fetch Supabase URL and Anon Key from environment variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

// Basic validation
if (!supabaseUrl) {
  throw new Error("Missing environment variable NEXT_PUBLIC_SUPABASE_URL")
}
if (!supabaseAnonKey) {
  throw new Error("Missing environment variable NEXT_PUBLIC_SUPABASE_ANON_KEY")
}

// Create and export the Supabase client instance
// Use the Database type for type safety
export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey)
